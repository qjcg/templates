// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/rabbitmq/cluster-operator/api/v1beta1

package v1beta1

import (
	"github.com/rabbitmq/cluster-operator/internal/status"
	corev1 "k8s.io/api/core/v1"
)

// Status presents the observed state of RabbitmqCluster
#RabbitmqClusterStatus: {
	// Set of Conditions describing the current state of the RabbitmqCluster
	conditions: [...status.#RabbitmqClusterCondition] @go(Conditions,[]status.RabbitmqClusterCondition)

	// Identifying information on internal resources
	defaultUser?: null | #RabbitmqClusterDefaultUser @go(DefaultUser,*RabbitmqClusterDefaultUser)

	// Binding exposes a secret containing the binding information for this
	// RabbitmqCluster. It implements the service binding Provisioned Service
	// duck type. See: https://github.com/servicebinding/spec#provisioned-service
	binding?: null | corev1.#LocalObjectReference @go(Binding,*corev1.LocalObjectReference)

	// observedGeneration is the most recent successful generation observed for this RabbitmqCluster. It corresponds to the
	// RabbitmqCluster's generation, which is updated on mutation by the API Server.
	observedGeneration?: int64 @go(ObservedGeneration)
}

// Contains references to resources created with the RabbitmqCluster resource.
#RabbitmqClusterDefaultUser: {
	// Reference to the Kubernetes Secret containing the credentials of the default
	// user.
	secretReference?: null | #RabbitmqClusterSecretReference @go(SecretReference,*RabbitmqClusterSecretReference)

	// Reference to the Kubernetes Service serving the cluster.
	serviceReference?: null | #RabbitmqClusterServiceReference @go(ServiceReference,*RabbitmqClusterServiceReference)
}

// Reference to the Kubernetes Secret containing the credentials of the default user.
#RabbitmqClusterSecretReference: {
	// Name of the Secret containing the default user credentials
	name: string @go(Name)

	// Namespace of the Secret containing the default user credentials
	namespace: string @go(Namespace)

	// Key-value pairs in the Secret corresponding to `username`, `password`, `host`, and `port`
	keys: {[string]: string} @go(Keys,map[string]string)
}

// Reference to the Kubernetes Service serving the cluster.
#RabbitmqClusterServiceReference: {
	// Name of the Service serving the cluster
	name: string @go(Name)

	// Namespace of the Service serving the cluster
	namespace: string @go(Namespace)
}
